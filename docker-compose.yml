version: '3.8'

services:
  frontend:
    build:
      context: ./frontend 
      args:
        REACT_APP_BACKEND_API_URL: ${BACKEND_API_URL} 
        REACT_APP_TIME_INTERVAL: ${TIME_INTERVAL}
        NODE_ENV: ${NODE_ENV}
    container_name: react_frontend
    environment:
      - PORT=${FRONTEND_PORT}
    networks:
      - backend_network
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT} 
    depends_on:
      - backend
   
  backend:
    build:
      context: ./backend
    container_name: go_backend
    environment:
     - BACKEND_PORT=${BACKEND_PORT}
     - DATABASE_URL=${DATABASE_URL}
     - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS} 
    networks:
      - backend_network
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on:
      - postgres

  postgres:
    build:
      context: ./database
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data  
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
  pinger:
    build: 
      context: ./pinger
    container_name: go_pinger
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - TIME_ZONE=${TIME_ZONE}
      - TIME_INTERVAL=${TIME_INTERVAL}
      - DOCKER_HOST=unix:///var/run/docker.sock
    network_mode: "host"  
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
